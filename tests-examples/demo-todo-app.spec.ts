import { expect, test as base } from "@playwright/test";
import { DataPage } from "../pages/DataPage";
import { DonationWidget } from "../pages/DonationWidget";
import { DonationType } from "../models/DonationType";
import { PaymentMethodType } from "../models/PaymentMethodType";
import { CreditCard } from "../models/CreditCard";
import { PersonalInfo } from "../models/PersonalInfo";

const test = base.extend<{ dataPage: DataPage }>({
  dataPage: async ({ page }, use) => {
    const dataPage = new DataPage(page);
    await use(dataPage);
  },
});

test.beforeEach(async ({ page }) => {
  await page.goto("https://data.fundraiseup.com/qa-test-7R58U3/");
});

test("make donation with invalid card should throw an error", async ({
  page,
  dataPage,
}) => {
  // 1. –î–æ–Ω–æ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç
  // 2. –ö–ª–∏–∫–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ÄúGive now‚Äù
  await dataPage.openDonationPage();

  // 3. –í—ã–±–∏—Ä–∞–µ—Ç ‚ÄúMonthly‚Äù –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ
  let donationWidget = new DonationWidget(page);
  await donationWidget.setPeriod(DonationType.Monthly);

  // 4. –í–≤–æ–¥–∏—Ç —Å—É–º–º—É 100 USD
  await donationWidget.setAmount(100);

  // 5. –ù–∞–∂–∏–º–∞–µ—Ç ‚ÄúDonate monthly‚Äù
  await donationWidget.donate();

  // 6. –£–±–∏—Ä–∞–µ—Ç —á–µ–∫-–±–æ–∫—Å –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–∏ ‚ÄúCover transaction costs‚Äù
  await donationWidget.setCoverFee(false);

  // 7. –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π ‚ÄúCredit card‚Äù
  let creditCardWidget = await donationWidget.setPaymentMethod(
    PaymentMethodType.Card,
  );

  // 8. –í–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
  // ```
  // Card number: **4242 4242 4242 4242**
  // Expire:      **04/24**
  // CVC:         **000**
  // ```
  let creditCard = new CreditCard("4242 4242 4242 4242", "04/24", "000");
  await creditCardWidget.fillCardDetails(creditCard);

  // 1. –ù–∞–∂–∏–º–∞–µ—Ç ‚ÄúContinue‚Äù
  const payerInfoWidget = await creditCardWidget.continue();

  // 9. –í–≤–æ–¥–∏—Ç ‚ÄúFirst name‚Äù
  // 10. –í–≤–æ–¥–∏—Ç ‚ÄúLast name‚Äù
  // 11. –í–≤–æ–¥–∏—Ç ‚ÄúE-mail‚Äù
  let personalInfo = new PersonalInfo("Jek", "Tomsa", "isqad.bro@gmail.com");
  await payerInfoWidget.fillPayerPersonalInfo(personalInfo);

  // 12. –ù–∞–∂–∏–º–∞–µ—Ç ‚ÄúDonate‚Äù
  await payerInfoWidget.makeDonation();

  // üí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —à–∞–≥–∞ —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç–∫—Ä–∞–Ω –≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—à–∏–±–∫—É
  expect(creditCardWidget.isOpened()).toBeTruthy();
  let alert = await creditCardWidget.getAlert();
  expect(alert.title).toStrictEqual("Your card was declined");
  expect(alert.text).toStrictEqual(
    "Your card was declined. Your request was in live mode, but used a known test card.",
  );
});
